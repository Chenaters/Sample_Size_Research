#### Simulation based on
#### #Baker TA, Buchanan NT, Corson N. Factorsinfluencing chronic pain intensity in older black women: examining depression, locus of control, and physical health.
library(MASS)
library(nlme);
library(simr);
import simr
package simr
library(knitr)
#simulation final version for thesis
library(MASS)
source("C:\\Users\\12245\\Documents\\Data_Size_SIR_2024\\Sample_Size_Prediction-main\\studies\\YifanMaThesis\\YifanMaThesis\\code\\sto_simu_functions.R")
#simulation final version for thesis
library(MASS)
source("C:\\Users\\12245\\Documents\\Data_Size_SIR_2024\\Sample_Size_Prediction-main\\studies\\YifanMaThesis\\YifanMaThesis\\code\\sto_simu_functions.R")
k = 12
p = 3
predNum = seq(3,12);
#sigmak2.full = sigmak2(COV);
b.fixed = as.matrix(c(b.age, b.edu, b.income, b.como, b.location, b.medic, b.phys, b.depress,
b.satisf, b.loc.chance, b.loc.power, b.loc.internal));
#simulation final version for thesis
library(MASS)
source("C:\\Users\\12245\\Documents\\Data_Size_SIR_2024\\Sample_Size_Prediction-main\\studies\\YifanMaThesis\\YifanMaThesis\\code\\sto_simu_functions.R")
k = 12  #amount of predictors
p = 3 # more predictors
predNum = seq(3,12);
#sigmak2.full = sigmak2(COV);
b.fixed = as.matrix(c(b.age, b.edu, b.income, b.como, b.location, b.medic, b.phys, b.depress,
b.satisf, b.loc.chance, b.loc.power, b.loc.internal));
N.pred = length(names.pred)
names.pred = c("Age", "Education", "Income", "Comorbidities",
"PainLocations", "Medications", "PhysicalFunctioning",
"DepressiveSymptoms", "LifeSatisfaction",
"LOCchance", "LOCpowerful", "LOCinternal")
N.pred = length(names.pred)
#suppose predictors data are standardized
MU = rep(0,(N.pred+1))
simuN = 5000; #The number of simulations.
samplesizeN = seq(30, 600, by=30); #sample size levels
samplesizeN
predNum
predNum = factor(1:9); # number of 'non basic' predictors over 3 basic predictors
outputs = vector(mode = "list", length(predNum)); #prediction outputs using CORR generate matrix.
basic.output = vector(mode = "list", 1); #basic model output
outputs
simuN = 5000; #The number of simulations.
samplesizeN = seq(30, 600, by=30); #sample size levels
# out put area
predNum = factor(1:9); # number of 'non basic' predictors over 3 basic predictors
outputs = vector(mode = "list", length(predNum)); #prediction outputs using CORR generate matrix.
basic.output = vector(mode = "list", 1); #basic model output
#Store correlation and MSE over sample sizes and proportions of predictors using CORR generate matrix.
PMSE = array(NA, dim=c(length(samplesizeN), length(predNum)));
#Basic model output
Basic.PMSE = array(NA,dim=c(length(samplesizeN), 1));
PMSE.simu.matrix = matrix(nrow = length(samplesizeN), ncol = length(predNum))
#simulation final version for thesis
library(MASS)
source("NARULA/sto_simu _functions.R")
#simulation final version for thesis
library(MASS)
source("NARULA/sto_simu _functions.R")
#simulation final version for thesis
library(MASS)
source("sto_simu_functions.R")
#simulation final version for thesis
library(MASS)
source("sto_simu _functions.R")
#simulation final version for thesis
library(MASS)
#source("sto_simu _functions.R")
k = 12
p = 3
predNum = seq(3,12);
#sigmak2.full = sigmak2(COV);
#b.fixed = as.matrix(c(b.age, b.edu, b.income, b.como, b.location, b.medic, b.phys, b.depress,
# b.satisf, b.loc.chance, b.loc.power, b.loc.internal));
names.pred = c("Age", "Education", "Income", "Comorbidities",
"PainLocations", "Medications", "PhysicalFunctioning",
"DepressiveSymptoms", "LifeSatisfaction",
"LOCchance", "LOCpowerful", "LOCinternal")
N.pred = length(names.pred)
#suppose predictors data are standardized
MU = rep(0,(N.pred+1))
### residual variance for continous response
sigmak2 <- 0.4687399; # from calculation
###Parameters on prediction process
simuN = 5000; #The number of simulations.
samplesizeN = seq(30, 600, by=30); #sample size levels
predNum = factor(1:9); # number of 'non basic' predictors over 3 basic predictors
outputs = vector(mode = "list", length(predNum)); #prediction outputs using CORR generate matrix.
basic.output = vector(mode = "list", 1); #basic model output
#Store correlation and MSE over sample sizes and proportions of predictors using CORR generate matrix.
PMSE = array(NA, dim=c(length(samplesizeN), length(predNum)));
#Basic model output
Basic.PMSE = array(NA,dim=c(length(samplesizeN), 1));
PMSE.simu.matrix = matrix(nrow = length(samplesizeN), ncol = length(predNum))
for(ni in 1:length(samplesizeN)){
subjN = samplesizeN[ni]; #sample size
###Looping through simulations
for(si in 1:simuN) {
###Generate data  1. generate all predictors and response using the covariance matrix
dat = as.data.frame(mvrnorm(n= subjN, mu = MU,Sigma = COV));
names(dat) = c("y",names.pred)
newData = as.data.frame(t(mvrnorm(n=1, mu=MU, Sigma=COV)));
names(newData) = c("y",names.pred);
#Basic model setting
BasicTerm = paste("y ~", paste(names.pred[1:3], collapse = " + "));
BasicTerm.formula = as.formula(paste("y ~", paste(names.pred[1:3], collapse = " + ")));
###Full model definition for lm
full.model.formula.lm = as.formula(paste("y ~ ", paste(names.pred, collapse= " + ")));
for (pi in 1:length(predNum)) {
lm.formula = as.formula(paste("y ~", paste(names.pred[1:(3+pi)], collapse = " + ")));
lmfit = lm(lm.formula, data=dat);
Y.hat.0 = predict(lmfit, newData);
outputs[[pi]] = rbind(outputs[[pi]], (newData$y-Y.hat.0)^2);
}
lmfit.basic = lm(BasicTerm.formula, data=dat);
Y.hat.0 = predict(lmfit.basic, newData);
basic.output[[1]] = rbind(basic.output[[1]], (newData$y-Y.hat.0)^2);
}
#Prediction accuracies
for (pi in 1:length(predNum))
{
PMSE[ni, pi] = apply(outputs[[pi]], 2, mean)[1];
}
Basic.PMSE[ni,1] = apply(basic.output[[1]], 2, mean)[1];
print(subjN);
}
CORR = as.matrix(read.table("SIGMA.txt"))
library(Matrix)
CORR = as.matrix(read.table("SIGMA.txt"))
CORR = as.matrix(read.table("C:\Users\12245\Documents\Data_Size_SIR_2024\code_chen\SIGMA.txt"))
CORR = as.matrix(read.table("C:\\Users\\12245\\Documents\\Data_Size_SIR_2024\\code_chen\\SIGMA.txt"))
CORR
SD = 1
COV = sweep(sweep(CORR, 1, SD, "*"), 2, SD, "*")
COV
for(ni in 1:length(samplesizeN)){
subjN = samplesizeN[ni]; #sample size
###Looping through simulations
for(si in 1:simuN) {
###Generate data  1. generate all predictors and response using the covariance matrix
dat = as.data.frame(mvrnorm(n= subjN, mu = MU,Sigma = COV));
names(dat) = c("y",names.pred)
newData = as.data.frame(t(mvrnorm(n=1, mu=MU, Sigma=COV)));
names(newData) = c("y",names.pred);
#Basic model setting
BasicTerm = paste("y ~", paste(names.pred[1:3], collapse = " + "));
BasicTerm.formula = as.formula(paste("y ~", paste(names.pred[1:3], collapse = " + ")));
###Full model definition for lm
full.model.formula.lm = as.formula(paste("y ~ ", paste(names.pred, collapse= " + ")));
for (pi in 1:length(predNum)) {
lm.formula = as.formula(paste("y ~", paste(names.pred[1:(3+pi)], collapse = " + ")));
lmfit = lm(lm.formula, data=dat);
Y.hat.0 = predict(lmfit, newData);
outputs[[pi]] = rbind(outputs[[pi]], (newData$y-Y.hat.0)^2);
}
lmfit.basic = lm(BasicTerm.formula, data=dat);
Y.hat.0 = predict(lmfit.basic, newData);
basic.output[[1]] = rbind(basic.output[[1]], (newData$y-Y.hat.0)^2);
}
#Prediction accuracies
for (pi in 1:length(predNum))
{
PMSE[ni, pi] = apply(outputs[[pi]], 2, mean)[1];
}
Basic.PMSE[ni,1] = apply(basic.output[[1]], 2, mean)[1];
print(subjN);
}
MSE.output = as.data.frame(cbind(samplesizeN, Basic.PMSE, PMSE));
names(MSE.output) = c("Sample Size", "Basic Model", nonbasic.names);
#simulation final version for thesis
library(MASS)
library(Matrix)
#source("sto_simu _functions.R")
k = 12
p = 3
predNum = seq(3,12);
CORR = as.matrix(read.table("C:\\Users\\12245\\Documents\\Data_Size_SIR_2024\\code_chen\\SIGMA.txt"))
SD = 1
COV = sweep(sweep(CORR, 1, SD, "*"), 2, SD, "*")
COBETA_star = c(-0.2, -0.03, -0.02, -0.04, 0.12, 0.18, 0.26, 0.25, -0.01, 0.08, -0.26, 0.21)
#sigmak2.full = sigmak2(COV);
#b.fixed = as.matrix(c(b.age, b.edu, b.income, b.como, b.location, b.medic, b.phys, b.depress,
# b.satisf, b.loc.chance, b.loc.power, b.loc.internal));
names.pred = c("Age", "Education", "Income", "Comorbidities",
"PainLocations", "Medications", "PhysicalFunctioning",
"DepressiveSymptoms", "LifeSatisfaction",
"LOCchance", "LOCpowerful", "LOCinternal")
N.pred = length(names.pred)
#suppose predictors data are standardized
MU = rep(0,(N.pred+1))
### residual variance for continous response
sigmak2 <- 0.4687399; # from calculation
###Parameters on prediction process
simuN = 5000; #The number of simulations.
samplesizeN = seq(30, 600, by=30); #sample size levels
predNum = factor(1:9); # number of 'non basic' predictors over 3 basic predictors
outputs = vector(mode = "list", length(predNum)); #prediction outputs using CORR generate matrix.
basic.output = vector(mode = "list", 1); #basic model output
#Store correlation and MSE over sample sizes and proportions of predictors using CORR generate matrix.
PMSE = array(NA, dim=c(length(samplesizeN), length(predNum)));
#Basic model output
Basic.PMSE = array(NA,dim=c(length(samplesizeN), 1));
PMSE.simu.matrix = matrix(nrow = length(samplesizeN), ncol = length(predNum))
for(ni in 1:length(samplesizeN)){
subjN = samplesizeN[ni]; #sample size
###Looping through simulations
for(si in 1:simuN) {
###Generate data  1. generate all predictors and response using the covariance matrix
dat = as.data.frame(mvrnorm(n= subjN, mu = MU,Sigma = COV));
names(dat) = c("y",names.pred)
newData = as.data.frame(t(mvrnorm(n=1, mu=MU, Sigma=COV)));
names(newData) = c("y",names.pred);
#Basic model setting
BasicTerm = paste("y ~", paste(names.pred[1:3], collapse = " + "));
BasicTerm.formula = as.formula(paste("y ~", paste(names.pred[1:3], collapse = " + ")));
###Full model definition for lm
full.model.formula.lm = as.formula(paste("y ~ ", paste(names.pred, collapse= " + ")));
for (pi in 1:length(predNum)) {
lm.formula = as.formula(paste("y ~", paste(names.pred[1:(3+pi)], collapse = " + ")));
lmfit = lm(lm.formula, data=dat);
Y.hat.0 = predict(lmfit, newData);
outputs[[pi]] = rbind(outputs[[pi]], (newData$y-Y.hat.0)^2);
}
lmfit.basic = lm(BasicTerm.formula, data=dat);
Y.hat.0 = predict(lmfit.basic, newData);
basic.output[[1]] = rbind(basic.output[[1]], (newData$y-Y.hat.0)^2);
}
#Prediction accuracies
for (pi in 1:length(predNum))
{
PMSE[ni, pi] = apply(outputs[[pi]], 2, mean)[1];
}
Basic.PMSE[ni,1] = apply(basic.output[[1]], 2, mean)[1];
print(subjN);
}
length(samplesizeN)
simuN
predNum
#simulation final version for thesis
library(MASS)
library(Matrix)
#source("sto_simu _functions.R")
k = 12
p = 3
predNum = seq(3,12);
CORR = as.matrix(read.table("C:\\Users\\12245\\Documents\\Data_Size_SIR_2024\\code_chen\\SIGMA.txt"))
SD = 1
COV = sweep(sweep(CORR, 1, SD, "*"), 2, SD, "*")
COBETA_star = c(-0.2, -0.03, -0.02, -0.04, 0.12, 0.18, 0.26, 0.25, -0.01, 0.08, -0.26, 0.21)
#sigmak2.full = sigmak2(COV);
#b.fixed = as.matrix(c(b.age, b.edu, b.income, b.como, b.location, b.medic, b.phys, b.depress,
# b.satisf, b.loc.chance, b.loc.power, b.loc.internal));
names.pred = c("Age", "Education", "Income", "Comorbidities",
"PainLocations", "Medications", "PhysicalFunctioning",
"DepressiveSymptoms", "LifeSatisfaction",
"LOCchance", "LOCpowerful", "LOCinternal")
N.pred = length(names.pred)
#suppose predictors data are standardized
MU = rep(0,(N.pred+1))
### residual variance for continous response
sigmak2 <- 0.4687399; # from calculation
###Parameters on prediction process
simuN = 5000; #The number of simulations.
samplesizeN = seq(30, 600, by=30); #sample size levels
predNum = factor(1:9); # number of 'non basic' predictors over 3 basic predictors
outputs = vector(mode = "list", length(predNum)); #prediction outputs using CORR generate matrix.
basic.output = vector(mode = "list", 1); #basic model output
#Store correlation and MSE over sample sizes and proportions of predictors using CORR generate matrix.
PMSE = array(NA, dim=c(length(samplesizeN), length(predNum)));
#Basic model output
Basic.PMSE = array(NA,dim=c(length(samplesizeN), 1));
PMSE.simu.matrix = matrix(nrow = length(samplesizeN), ncol = length(predNum))
for(ni in 1:length(samplesizeN)){
subjN = samplesizeN[ni]; #sample size
###Looping through simulations
for(si in 1:simuN) {
###Generate data  1. generate all predictors and response using the covariance matrix
dat = as.data.frame(mvrnorm(n= subjN, mu = MU,Sigma = COV));
names(dat) = c("y",names.pred)
newData = as.data.frame(t(mvrnorm(n=1, mu=MU, Sigma=COV)));
names(newData) = c("y",names.pred);
#Basic model setting
BasicTerm = paste("y ~", paste(names.pred[1:3], collapse = " + "));
BasicTerm.formula = as.formula(paste("y ~", paste(names.pred[1:3], collapse = " + ")));
###Full model definition for lm
full.model.formula.lm = as.formula(paste("y ~ ", paste(names.pred, collapse= " + ")));
for (pi in 1:length(predNum)) {
lm.formula = as.formula(paste("y ~", paste(names.pred[1:(3+pi)], collapse = " + ")));
lmfit = lm(lm.formula, data=dat);
Y.hat.0 = predict(lmfit, newData);
outputs[[pi]] = rbind(outputs[[pi]], (newData$y-Y.hat.0)^2);
}
lmfit.basic = lm(BasicTerm.formula, data=dat);
Y.hat.0 = predict(lmfit.basic, newData);
basic.output[[1]] = rbind(basic.output[[1]], (newData$y-Y.hat.0)^2);
}
#Prediction accuracies
for (pi in 1:length(predNum))
{
PMSE[ni, pi] = apply(outputs[[pi]], 2, mean)[1];
}
Basic.PMSE[ni,1] = apply(basic.output[[1]], 2, mean)[1];
print(subjN);
}
subjN
print(subjN)
PMSE
si = 1
si
dat = as.data.frame(mvrnorm(n= subjN, mu = MU,Sigma = COV));
names(dat) = c("y",names.pred)
newData = as.data.frame(t(mvrnorm(n=1, mu=MU, Sigma=COV)));
names(newData) = c("y",names.pred);
#Basic model setting
BasicTerm = paste("y ~", paste(names.pred[1:3], collapse = " + "));
BasicTerm.formula = as.formula(paste("y ~", paste(names.pred[1:3], collapse = " + ")));
###Full model definition for lm
full.model.formula.lm = as.formula(paste("y ~ ", paste(names.pred, collapse= " + ")));
for (pi in 1:length(predNum)) {
lm.formula = as.formula(paste("y ~", paste(names.pred[1:(3+pi)], collapse = " + ")));
lmfit = lm(lm.formula, data=dat);
Y.hat.0 = predict(lmfit, newData);
outputs[[pi]] = rbind(outputs[[pi]], (newData$y-Y.hat.0)^2);
}
lmfit.basic = lm(BasicTerm.formula, data=dat);
Y.hat.0 = predict(lmfit.basic, newData);
basic.output[[1]] = rbind(basic.output[[1]], (newData$y-Y.hat.0)^2);
k
dat = as.data.frame(mvrnorm(n= subjN, mu = MU,Sigma = COV));
names(dat) = c("y",names.pred)
newData = as.data.frame(t(mvrnorm(n=1, mu=MU, Sigma=COV)));
names(newData) = c("y",names.pred);
#Basic model setting
BasicTerm = paste("y ~", paste(names.pred[1:3], collapse = " + "));
BasicTerm.formula = as.formula(paste("y ~", paste(names.pred[1:3], collapse = " + ")));
###Full model definition for lm
full.model.formula.lm = as.formula(paste("y ~ ", paste(names.pred, collapse= " + ")));
for (pi in 1:length(predNum)) {
lm.formula = as.formula(paste("y ~", paste(names.pred[1:(3+pi)], collapse = " + ")));
lmfit = lm(lm.formula, data=dat);
Y.hat.0 = predict(lmfit, newData);
outputs[[pi]] = rbind(outputs[[pi]], (newData$y-Y.hat.0)^2);
}
lmfit.basic = lm(BasicTerm.formula, data=dat);
Y.hat.0 = predict(lmfit.basic, newData);
basic.output[[1]] = rbind(basic.output[[1]], (newData$y-Y.hat.0)^2);
data
dat
for (pi in 1:length(predNum))
{
PMSE[ni, pi] = apply(outputs[[pi]], 2, mean)[1];
}
PMSE
Basic.PMSE
ni
#simulation final version for thesis
library(MASS)
library(Matrix)
#source("sto_simu _functions.R")
k = 12
p = 3
predNum = seq(3,12);
CORR = as.matrix(read.table("C:\\Users\\12245\\Documents\\Data_Size_SIR_2024\\code_chen\\SIGMA.txt"))
SD = 1
COV = sweep(sweep(CORR, 1, SD, "*"), 2, SD, "*")
COBETA_star = c(-0.2, -0.03, -0.02, -0.04, 0.12, 0.18, 0.26, 0.25, -0.01, 0.08, -0.26, 0.21)
#sigmak2.full = sigmak2(COV);
#b.fixed = as.matrix(c(b.age, b.edu, b.income, b.como, b.location, b.medic, b.phys, b.depress,
# b.satisf, b.loc.chance, b.loc.power, b.loc.internal));
names.pred = c("Age", "Education", "Income", "Comorbidities",
"PainLocations", "Medications", "PhysicalFunctioning",
"DepressiveSymptoms", "LifeSatisfaction",
"LOCchance", "LOCpowerful", "LOCinternal")
N.pred = length(names.pred)
#suppose predictors data are standardized
MU = rep(0,(N.pred+1))
### residual variance for continous response
sigmak2 <- 0.4687399; # from calculation
###Parameters on prediction process
simuN = 5000; #The number of simulations.
samplesizeN = seq(30, 600, by=30); #sample size levels
predNum = factor(1:9); # number of 'non basic' predictors over 3 basic predictors
outputs = vector(mode = "list", length(predNum)); #prediction outputs using CORR generate matrix.
basic.output = vector(mode = "list", 1); #basic model output
#Store correlation and MSE over sample sizes and proportions of predictors using CORR generate matrix.
PMSE = array(NA, dim=c(length(samplesizeN), length(predNum)));
PMSE
